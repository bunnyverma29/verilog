$date
	Fri Jun 11 02:51:58 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 1 ! invalid $end
$var wire 1 " full $end
$var wire 1 # empty $end
$var wire 8 $ data_out [7:0] $end
$var reg 1 % clk $end
$var reg 8 & data_in [7:0] $end
$var reg 1 ' read_n $end
$var reg 1 ( reset $end
$var reg 1 ) write_n $end
$scope module dut1 $end
$var wire 1 % clk $end
$var wire 8 * data_in [7:0] $end
$var wire 1 ' read_n $end
$var wire 1 ( reset $end
$var wire 1 ) write_n $end
$var wire 1 " full $end
$var wire 1 # empty $end
$var reg 8 + data_out [7:0] $end
$var reg 1 ! invalid $end
$var reg 4 , rd_pointer [3:0] $end
$var reg 4 - wr_pointer [3:0] $end
$var integer 32 . i [31:0] $end
$upscope $end
$scope task initialise $end
$upscope $end
$scope task read $end
$upscope $end
$scope task rst $end
$upscope $end
$scope task write $end
$var reg 8 / wr_data [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx /
bx .
bx -
bx ,
bx +
bx *
x)
x(
x'
bx &
0%
bx $
x#
x"
x!
$end
#5
1!
1%
#10
0'
0)
1(
0%
#15
0!
b0 $
b0 +
0"
1#
b0 -
b0 ,
b10000 .
1%
#20
1'
0(
0%
#25
1!
1%
#28
b11 &
b11 *
1)
b11 /
0'
#30
0%
#35
0#
b1 -
0!
1%
#38
b110 &
b110 *
b110 /
1)
#40
0%
#45
b10 -
1%
#48
1'
0)
#50
0%
#55
b1 ,
b11 $
b11 +
1%
#58
1'
#60
0%
#65
b10 ,
b110 $
b110 +
1%
#68
b1101 &
b1101 *
1)
b1101 /
0'
#70
0%
#75
b11 -
1%
#78
b100 &
b100 *
b100 /
1)
#80
0%
#85
b100 -
1%
#88
b101 &
b101 *
b101 /
1)
#90
0%
#95
b101 -
1%
#98
b1000 &
b1000 *
b1000 /
1)
#100
0%
#105
b110 -
1%
#108
b10 &
b10 *
b10 /
1)
#110
0%
#115
b111 -
1%
#118
b1001 &
b1001 *
b1001 /
1)
#120
0%
#125
b1000 -
1%
#128
b1 &
b1 *
b1 /
1)
#130
0%
#135
b1001 -
1%
#138
b101 &
b101 *
b101 /
1)
#140
0%
#145
b1010 -
1%
#148
b1001 &
b1001 *
b1001 /
1)
#150
0%
#155
b1011 -
1%
#158
b0 &
b0 *
b0 /
1)
#160
0%
#165
b1100 -
1%
#168
b110 &
b110 *
b110 /
1)
#170
0%
#175
b1101 -
1%
#178
b111 &
b111 *
b111 /
1)
#180
0%
#185
b1110 -
1%
#188
b1001 &
b1001 *
b1001 /
1)
#190
0%
#195
1"
b1111 -
1%
#198
b10 &
b10 *
b10 /
1)
#200
0%
#205
1!
1%
#208
b100 &
b100 *
b100 /
1)
#210
0%
#215
1%
#218
1'
0)
#220
0%
#225
b11 ,
b1101 $
b1101 +
0!
1%
#228
1'
#230
0%
#235
b100 ,
b100 $
b100 +
1%
#238
1'
#240
0%
#245
b101 ,
b101 $
b101 +
1%
#248
1'
#250
0%
#255
b110 ,
b1000 $
b1000 +
1%
#258
1'
#260
0%
#265
b111 ,
b10 $
b10 +
1%
#268
1'
#270
0%
#275
b1000 ,
b1001 $
b1001 +
1%
#278
1'
#280
0%
#285
b1001 ,
b1 $
b1 +
1%
#288
1'
#290
0%
#295
b1010 ,
b101 $
b101 +
1%
#298
1'
#300
0%
#305
b1011 ,
b1001 $
b1001 +
1%
#308
1'
#310
0%
#315
b1100 ,
b0 $
b0 +
1%
#318
1'
#320
0%
#325
b1101 ,
b110 $
b110 +
1%
#328
1'
#330
0%
#335
b1110 ,
b111 $
b111 +
1%
#338
1'
#340
0%
#345
b1111 ,
b1001 $
b1001 +
1%
#348
1'
#350
0%
#355
b0 ,
b0 $
b0 +
1%
#358
1'
#360
0%
#365
b1 ,
b11 $
b11 +
1%
#368
0'
#370
0%
#375
1!
1%
#378
